{"version":3,"sources":["../../../log/log.ts","../../../log/log_context.ts","../../../log/log_debug.web.ts","../../../log/log_filter.web.ts","../../../log/log_group.ts","../../../test/test.test.ts","../../../assert/assert.test.ts","../../../assert/assert.ts","../../duration/duration.test.ts","../../moment/moment.test.ts","../../interval/interval.test.ts"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\n\texport function $mol_log( path : any , ... values : any[] ) {\n\t\t\n\t\tif( $mol_log_filter() == null ) return\n\t\t\n\t\tpath = String( path )\n\t\tif( path.indexOf( $mol_log_filter() ) === -1 ) return\n\t\t\n\t\tif( $mol_log_context() ) $mol_log_context()()\n\t\t\n\t\tconsole.debug( path , ... values )\n\n\t\tif( $mol_log_debug() == null ) return\n\t\tif( path.indexOf( $mol_log_debug() ) === -1 ) return\n\t\t\n\t\tdebugger\n\t}\n\t\n}\n","namespace $ {\n\n\tlet context : ()=> void = null\n\texport function $mol_log_context( next = context ) {\n\t\treturn context = next\n\t}\n\n}\n","namespace $ {\n\t\n\texport function $mol_log_debug( next? : string ) {\n\n\t\tif( next !== undefined ) {\n\t\t\tif( next == null ) {\n\t\t\t\tsessionStorage.removeItem( '$mol_log_debug()' )\n\t\t\t} else {\n\t\t\t\tsessionStorage.setItem( '$mol_log_debug()' , next )\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn sessionStorage.getItem( '$mol_log_debug()' )\n\t}\n\n}\n","namespace $ {\n\t\n\tlet filter : string\n\texport function $mol_log_filter( next? : string ) {\n\n\t\tif( next !== undefined ) {\n\t\t\tif( next == null ) {\n\t\t\t\tsessionStorage.removeItem( '$mol_log_filter()' )\n\t\t\t} else {\n\t\t\t\tsessionStorage.setItem( '$mol_log_filter()' , next )\n\t\t\t}\n\n\t\t\tfilter = next\n\t\t}\n\n\t\tif( filter !== undefined ) return filter\n\t\t\n\t\treturn filter = sessionStorage.getItem( '$mol_log_filter()' )\n\t}\n\n}\n","namespace $ {\n\n\texport function $mol_log_group< Task extends Function >( name : string , task : Task ) {\n\t\t\n\t\treturn function $mol_log_group_wrapper( ... args : any [] ) {\n\t\t\tconst filter = $mol_log_filter()\n\t\t\tif( filter == null ) return task.apply( this , args )\n\n\t\t\tlet started = false\n\t\t\tlet prev = $mol_log_context()\n\n\t\t\t$mol_log_context( ()=> {\n\t\t\t\tif( prev ) prev()\n\t\t\t\tstarted = true\n\t\t\t\tif( filter ) console.group( name )\n\t\t\t\telse console.groupCollapsed( name )\n\t\t\t\t$mol_log_context( prev = null )\n\t\t\t} )\n\t\t\t\n\t\t\ttry {\n\t\t\t\treturn task.apply( this , args )\n\t\t\t} finally {\n\t\t\t\tif( started ) console.groupEnd()\n\t\t\t\t$mol_log_context( prev )\n\t\t\t}\n\n\t\t} as any as Task\n\n\t}\n\n}\n","namespace $ {\n\t\n\texport function $mol_test( set : { [ name : string ] : string | ( ()=> void ) } ) {\n\t\tfor( let name in set ) {\n\t\t\tconst code = set[ name ]\n\t\t\tconst test = ( typeof code === 'string' ) ? new Function( '' , code ) as ()=> void : code\n\t\t\t$mol_test_all.push( test )\n\t\t}\n\t\t$mol_test_schedule()\n\t}\n\t\n\texport const $mol_test_all = [] as Array< ()=> void >\n\n\texport function $mol_test_run() {\n\t\tfor( var test of $mol_test_all ) test()\n\t}\n\t\n\tlet scheduled = false\n\texport function $mol_test_schedule() {\n\t\tif( scheduled ) return\n\t\tscheduled = true\n\n\t\tsetTimeout( $mol_log_group( '$mol_test_run()' , ()=> {\n\t\t\tscheduled = false\n \t\t\t$mol_test_run()\n\t\t} ) )\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'two must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'three must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'two must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\tthrow new Error( `Not true (${value})` )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\tthrow new Error( `Not false (${value})` )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\ttry {\n\t\t\thandler()\n\t\t} catch( error ) {\n\t\t\tif( ErrorRight ) if(!( error instanceof ErrorRight )) throw error\n\t\t\treturn error\n\t\t}\n\t\tthrow new Error( 'Not failed' )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( ... args : Value[] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) continue\n\t\t\t\tif( args[i] !== args[j] ) throw new Error( `Not equal (${ args[i] }!==${ args[j] })` )\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_unique( ... args : any[] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( args[i] === args[j] || ( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) ) {\n\t\t\t\t\tthrow new Error( `Not unique (args[${ i }]===args[${ j }])===${ args[i] }` )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1Y' ).toString() , 'P42.1YT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1M' ).toString() , 'P42.1MT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1D' ).toString() , 'P42.1DT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1h' ).toString() , 'PT42.1H' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1m' ).toString() , 'PT42.1M' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1s' ).toString() , 'PT42.1S' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P1Y2M3DT4h5m6.7s' ).toString() , 'P1Y2M3DT4H5M6.7S' )\n\t\t} ,\n\t\t\n\t\t'format typed'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_duration( 'P1Y2M3DT4h5m6s' ).toString( 'P#Y#M#DT#h#m#s' ) ,\n\t\t\t\t'P1Y2M3DT4H5M6S'\n\t\t\t)\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014' ).toString() , '2014' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).toString() , '2014-01' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).toString() , '2014-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03' ).toString() , '2014-01-02T03' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04' ).toString() , '2014-01-02T03:04' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05' ).toString() , '2014-01-02T03:04:05' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006' ).toString() , '2014-01-02T03:04:05.006' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006Z' ).toString() , '2014-01-02T03:04:05.006+00:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006+07:00' ).toString() , '2014-01-02T03:04:05.006+07:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05+07:08' ).toString() , '2014-01-02T03:04:05+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04+07:08' ).toString() , '2014-01-02T03:04+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04+07:08' ).toString() , 'T03:04+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04:05' ).toString() , 'T03:04:05' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04' ).toString() , 'T03:04' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03' ).toString() , 'T03' )\n\t\t} ,\n\t\t\n\t\t'format simple'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000' ).toString( 'AD YY-M-D h:m:s' ) ,\n\t\t\t\t'21 14-1-2 1:2:3'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format padded'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000' ).toString( 'YYYY-MM-DD hh:mm:ss' ) ,\n\t\t\t\t'2014-01-02 01:02:03'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format time zone'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03+05:00' ).toString( 'Z' ) ,\n\t\t\t\t'+05:00'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format names'() {\n\t\t\t$mol_assert_ok(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000' ).toString( 'Month Mon | WeekDay WD' )\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'shifting'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T15:54:58.243+03:00' ).shift( {} ).toString() , 'T15:54:58.243+03:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P1Y' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P12M' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P365D' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'PT8760h' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).shift( 'PT8760h' ).toString() , '2015-01' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).shift( 'PT-8760h' ).toString() , '2013-01' )\n\t\t} ,\n\t\t\n\t\t'normalization'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2015-07-35' ).normal.toString() ,\n\t\t\t\t'2015-08-04'\n\t\t\t)\n\t\t} , \n\t\n\t\t'iso week day'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2017-09-17' ).weekday , 6 )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2017-09-18' ).weekday , 0 )\n\t\t} ,\n\n\t} )\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'triplets'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( '2015-01-01/P1M' ).end.toString() ,\n\t\t\t\t'2015-02-01'\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( 'P1M/2015-02-01' ).start.toString() ,\n\t\t\t\t'2015-01-01'\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( '2015-01-01/2015-02-01' ).duration.toString() ,\n\t\t\t\t'PT2678400S'\n\t\t\t)\n\t\t}\n\t\t\n\t})\n}\n"]}