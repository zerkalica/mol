{"version":3,"sources":["../../../../../test/test.test.ts","../../../../../assert/assert.test.ts","../../../../../assert/assert.ts","../../../../../fiber/warp/warp.ts","../../../../../fiber/async/async.ts","../../../../../func/name/name.ts","../../../../../object/object.test.ts","../../../../../object/object.ts","../../../../../defer/defer.ts","../../../../../fiber/fiber.test.ts","../../../../../dom/make/make.test.ts","../../../../../dom/jsx/jsx.test.tsx"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\t\n\texport function $mol_test( set : { [ name : string ] : string | ( ()=> void ) } ) {\n\t\tfor( let name in set ) {\n\t\t\tconst code = set[ name ]\n\t\t\tconst test = ( typeof code === 'string' ) ? new Function( '' , code ) as ()=> void : code\n\t\t\t$mol_test_all.push( test )\n\t\t}\n\t\t$mol_test_schedule()\n\t}\n\t\n\texport const $mol_test_all = [] as Array< ()=> void >\n\n\texport function $mol_test_run() {\n\t\tfor( var test of $mol_test_all ) test()\n\t}\n\t\n\tlet scheduled = false\n\texport function $mol_test_schedule() {\n\t\tif( scheduled ) return\n\t\tscheduled = true\n\n\t\tsetTimeout( $mol_log_group( '$mol_test_run()' , ()=> {\n\t\t\tscheduled = false\n \t\t\t$mol_test_run()\n\t\t} ) )\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'two must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'three must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'two must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\tthrow new Error( `Not true (${value})` )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\tthrow new Error( `Not false (${value})` )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\ttry {\n\t\t\thandler()\n\t\t} catch( error ) {\n\t\t\tif( ErrorRight ) if(!( error instanceof ErrorRight )) throw error\n\t\t\treturn error\n\t\t}\n\t\tthrow new Error( 'Not failed' )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( ... args : Value[] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) continue\n\t\t\t\tif( args[i] !== args[j] ) throw new Error( `Not equal (${ args[i] }!==${ args[j] })` )\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_unique( ... args : any[] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( args[i] === args[j] || ( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) ) {\n\t\t\t\t\tthrow new Error( `Not unique (args[${ i }]===args[${ j }])===${ args[i] }` )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n","namespace $ {\n\n\texport function $mol_fiber_warp() {\n\t\twhile( $mol_fiber.queue.length ) {\n\t\t\t$mol_fiber.tick()\n\t\t}\n\t\t$mol_fiber.tick()\n\t}\n\n}\n","namespace $ {\n\n\texport function $mol_fiber_async< Result = void >(\n\t\trequest : (\n\t\t\tback : (\n\t\t\t\tresponse :  ( ... args : any[] )=> Result\n\t\t\t)=> ( ... args : any[] )=> Result\n\t\t)=> PromiseLike< Result > | { (): any } | void\n\t) {\n\n\t\tconst fiber = $mol_fiber_make< Result >( ()=> {\n\n\t\t\tconst res = request( response => ( ... args : any[] )=> {\n\t\t\t\t\n\t\t\t\tif( !fiber.masters ) return\n\n\t\t\t\ttry {\n\t\t\t\t\treturn fiber.done( response( ... args ) )\n\t\t\t\t} catch( error ) {\n\t\t\t\t\tfiber.fail( error )\n\t\t\t\t}\n\n\t\t\t} )\n\n\t\t\tif( res ) {\n\n\t\t\t\tif( typeof res === 'function' ) {\n\n\t\t\t\t\tfiber.abort = res\n\t\t\t\t\n\t\t\t\t} else if( typeof res.then === 'function' ) {\n\n\t\t\t\t\tres.then(\n\t\t\t\t\t\tresult => fiber.done( result ) ,\n\t\t\t\t\t\terror => fiber.fail( error ) ,\n\t\t\t\t\t)\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthrow $mol_fiber_wait\n\t\t} )\n\t\t\n\t\treturn fiber.start()\n\t}\n\n}\n","namespace $ {\n\t\n\texport var $mol_func_name_dict = new WeakMap< Function , string >()\n\n\texport function $mol_func_name( func : Function ) : string {\n\t\tlet name = $mol_func_name_dict.get( func )\n\t\tif( name != null ) return name\n\t\tname = func.name || Function.prototype.toString.call( func ).match( /([a-z0-9_$]*) ?(\\(|\\{|extends)/ )[ 1 ]\n\t\t$mol_func_name_dict.set( func , name )\n\t\t\n\t\treturn name\n\t}\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = X.make({\n\t\t\t\tfoo : ()=> 2 ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\t\n\t} )\n}\n","namespace $ {\n\n\texport namespace $$ { let $ }\n\t\n\texport type $mol_object_context = ( Window )&( typeof $.$$ )&( typeof $ )\n\t\n\texport class $mol_object {\n\t\t\n\t\tget $() {\n\t\t\tconst owner = this.object_owner()\n\t\t\treturn ( owner && owner.$ || $ ) as $mol_object_context\n\t\t}\n\t\t\n\t\tpublic static make< Instance >( this : { new() : Instance } , config : Partial< Instance > ) : Instance {\n\t\t\tconst instance = new this\n\t\t\tfor( let key in config ) instance[ key ] = config[ key ]\n\t\t\treturn instance\n\t\t}\n\t\t\n\t\tstatic toString() : string {\n\t\t\treturn $mol_func_name( this )\n\t\t}\n\t\t\n\t\t'object_owner()' : any\n\t\tobject_owner( next? : any ) {\n\t\t\treturn this[ 'object_owner()' ] || ( this[ 'object_owner()' ] = next )\n\t\t}\n\t\t\n\t\t'object_host()' : any\n\t\tobject_host( next? : any ) {\n\t\t\treturn this[ 'object_host()' ] || ( this[ 'object_host()' ] = next )\n\t\t}\n\t\t\n\t\t'object_field()' : string\n\t\tobject_field( next? : string ) {\n\t\t\treturn this[ 'object_field()' ] || ( this[ 'object_field()' ] = next ) || ''\n\t\t}\n\t\t\n\t\t'object_id()' : string\n\t\tobject_id( next? : string ) {\n\t\t\treturn this[ 'object_id()' ] || ( this[ 'object_id()' ] = next ) || ''\n\t\t}\n\n\t\ttoString() {\n\t\t\treturn this.object_id()\n\t\t}\n\t\t\n\t\ttoJSON() {\n\t\t\treturn this.toString()\n\t\t}\n\t\t\n\t\tdestructor() { }\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t\n\texport class $mol_defer extends $mol_object {\n\t\t\n\t\tconstructor( public run : ()=> void ) {\n\t\t\tsuper()\n\t\t\t$mol_defer.add( this )\n\t\t}\n\t\t\n\t\tdestructor() {\n\t\t\t$mol_defer.drop( this )\n\t\t}\n\t\t\n\t\tstatic all : $mol_defer[] = []\n\t\tstatic timer = 0\n\t\t\n\t\tstatic scheduleNative : ( handler : ()=> void ) => number = ( typeof requestAnimationFrame == 'function' )\n\t\t\t? handler => requestAnimationFrame( handler )\n\t\t\t: handler => setTimeout( handler , 16 )\n\t\t\n\t\tstatic schedule() {\n\t\t\tif( this.timer ) return\n\t\t\t\n\t\t\tthis.timer = this.scheduleNative( ()=> {\n\t\t\t\tthis.timer = 0\n\t\t\t\tthis.run()\n\t\t\t} )\n\t\t}\n\t\t\n\t\tstatic unschedule() {\n\t\t\tif( !this.timer ) return\n\t\t\t\n\t\t\tcancelAnimationFrame( this.timer )\n\t\t\tthis.timer = 0\n\t\t}\n\t\t\n\t\tstatic add( defer : $mol_defer ) {\n\t\t\tthis.all.push( defer )\n\t\t\tthis.schedule()\n\t\t}\n\t\t\n\t\tstatic drop( defer : $mol_defer ) {\n\t\t\tvar index = this.all.indexOf( defer )\n\t\t\tif( index >= 0 ) this.all.splice( index , 1 )\n\t\t}\n\t\t\n\t\tstatic run() {\n\t\t\tif( this.all.length === 0 ) return\n\t\t\tthis.schedule()\n\t\t\tfor( var defer : $mol_defer ; defer = this.all.shift() ; ) defer.run()\n\t\t\t//this.unschedule()\n\t\t}\n\t\t\n\t}\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'synchronous task'() {\n\t\t\t$mol_fiber_warp()\n\n\t\t\tconst task1 = $mol_fiber_func( ()=> 1 )\n\t\t\tconst task2 = $mol_fiber_func( ()=> task1() + 1 )\n\t\t\t\n\t\t\t$mol_assert_equal( task2() , 2 )\n\t\t} ,\n\n\t\t'wrapped in wrapped in wrapped'() {\n\t\t\t$mol_fiber_warp()\n\t\t\t\n\t\t\tconst history = [] as number[]\n\n\t\t\tconst log = ( val : number ) : number => {\n\t\t\t\treturn $mol_fiber_async( back => {\n\t\t\t\t\tnew $mol_defer( back( ()=> {\n\t\t\t\t\t\thistory.push( val )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t} ) )\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tconst subtask =  $mol_fiber_func( ( val : number )=> log( val ) )\n\n\t\t\t$mol_fiber_sync( ()=> {\n\t\t\t\thistory.push( subtask( 1 ) + subtask( 2 ) )\n\t\t\t} )\n\t\t\t\n\t\t\t$mol_defer.run() ; $mol_fiber_warp()\n\t\t\t$mol_defer.run() ; $mol_fiber_warp()\n\n\t\t\t$mol_assert_equal( history.join( ',' ) , '1,2,3' )\n\t\t} ,\n\n\t\t'destroyed while executed'() {\n\t\t\t$mol_fiber_warp()\n\t\t\t\n\t\t\tconst history = [] as number[]\n\n\t\t\tconst log = ( val : number ) : number => {\n\t\t\t\treturn $mol_fiber_async( back => {\n\t\t\t\t\tnew $mol_defer( back( ()=> {\n\t\t\t\t\t\thistory.push( val )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t} ) )\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tconst task = new $mol_fiber( ()=> {\n\t\t\t\thistory.push( log( 1 ) + log( 2 ) )\n\t\t\t} )\n\n\t\t\ttask.start()\n\t\t\ttask.destructor()\n\t\t\t$mol_defer.run()\n\n\t\t\t$mol_assert_equal( history.join( ',' ) , '' )\n\t\t} ,\n\n\t\t'aborted while executed'() {\n\t\t\t$mol_fiber_warp()\n\t\t\t\n\t\t\tconst history = [] as number[]\n\n\t\t\tconst log = ( val : number ) : number => {\n\t\t\t\treturn $mol_fiber_async( back => {\n\n\t\t\t\t\tlet disposed = false\n\t\t\t\t\t\n\t\t\t\t\tnew $mol_defer( ()=> {\n\t\t\t\t\t\tif( disposed ) return\n\t\t\t\t\t\thistory.push( val )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t} )\n\t\t\t\t\t\n\t\t\t\t\treturn ()=> disposed = true\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tconst task = new $mol_fiber( ()=> {\n\t\t\t\thistory.push( log( 1 ) + log( 2 ) )\n\t\t\t} )\n\n\t\t\ttask.start()\n\t\t\ttask.destructor()\n\t\t\t$mol_defer.run()\n\n\t\t\t$mol_assert_equal( history.join( ',' ) , '' )\n\t\t} ,\n\n\t\t'wrapped in func in decorated'() {\n\t\t\t$mol_fiber_warp()\n\t\t\t\n\t\t\tconst history = [] as number[]\n\n\t\t\tconst log = ( val : number ) : number => {\n\t\t\t\treturn $mol_fiber_async( back => {\n\t\t\t\t\tnew $mol_defer( back( ()=> {\n\t\t\t\t\t\thistory.push( val )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t} ) )\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tclass Test {\n\t\t\t\t\n\t\t\t\tstatic subtask( val : number ) {\n\t\t\t\t\treturn log( val )\n\t\t\t\t}\n\n\t\t\t\t@ $mol_fiber_method\n\t\t\t\tstatic task() {\n\t\t\t\t\thistory.push( this.subtask( 1 ) + this.subtask( 2 ) )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tTest.task()\n\n\t\t\t$mol_defer.run() ; $mol_fiber_warp()\n\t\t\t$mol_defer.run() ; $mol_fiber_warp()\n\n\t\t\t$mol_assert_equal( history.join( ',' ) , '1,2,3' )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make html:span'() {\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' ) as HTMLSpanElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<span id=\"$mol_dom_make_test\"></span>' )\n\t\t} ,\n\t\t\n\t\t'Make svg:svg'() {\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' , 'svg' , 'http://www.w3.org/2000/svg' )\n\t\t\t\n\t\t\t$mol_assert_equal( ( dom as HTMLElement ).outerHTML , '<svg id=\"$mol_dom_make_test\"></svg>' )\n\t\t\t//$mol_assert_equal( ( dom as SVGSVGElement ).viewBox.baseVal.width , 0 ) // https://github.com/tmpvar/jsdom/pull/1445\n\t\t} ,\n\t\t\n\t\t'Make to exists element'() {\n\t\t\tconst body = $mol_dom_context.document.body\n\t\t\t\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' ) as HTMLSpanElement\n\t\t\t\n\t\t\ttry {\n\t\t\t\tbody.appendChild( dom )\n\t\t\t\t$mol_assert_equal( dom , $mol_dom_make( '$mol_dom_make_test' ) )\n\t\t\t} finally {\n\t\t\t\tbody.removeChild( dom )\n\t\t\t}\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\t$mol_assert_equal( (<div/>).outerHTML , '<div></div>' )\n\t\t} ,\n\t\t\n\t\t'Make input with id and value'() {\n\t\t\tconst dom = <input id=\"$mol_dom_jsx_test\" value={ 123 } /> as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<input id=\"$mol_dom_jsx_test\">' )\n\t\t\t$mol_assert_equal( dom.value , '123' )\n\t\t} ,\n\t\t\n\t\t'Make content'() {\n\t\t\tconst id = '$mol_dom_jsx_test'\n\t\t\t\n\t\t\tconst dom =\n\t\t\t\t<div>\n\t\t\t\t\thello\n\t\t\t\t\t<strong>world</strong>\n\t\t\t\t\t!\n\t\t\t\t</div>\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tdom.outerHTML ,\n\t\t\t\t'<div>' +\n\t\t\t\t\t'hello' +\n\t\t\t\t\t'<strong>world</strong>' +\n\t\t\t\t\t'!' +\n\t\t\t\t'</div>'\n\t\t\t)\n\t\t} ,\n\n\t\t'Make to exists element'() {\n\t\t\tconst dom1 = <div id=\"$mol_dom_jsx_test\" />\n\t\t\t$mol_dom_context.document.body.appendChild( dom1 )\n\t\t\t\n\t\t\tconst dom2 = <div id=\"$mol_dom_jsx_test\">hello</div>\n\t\t\t$mol_dom_context.document.body.removeChild( dom1 )\n\t\t\t\n\t\t\t$mol_assert_equal( dom1 , dom2 )\n\t\t\t$mol_assert_equal( dom1.outerHTML , '<div id=\"$mol_dom_jsx_test\">hello</div>' )\n\t\t} ,\n\n\t\t'Pure function as component'() {\n\n\t\t\tfunction Button( props : { id : string , text : string } ) {\n\t\t\t\treturn <button id={ props.id }>{ props.text }</button>\n\t\t\t}\n\n\t\t\tconst dom = <Button id=\"$mol_dom_jsx_test\" text=\"click me\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML , '<button id=\"$mol_dom_jsx_test\">click me</button>' )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n"]}